{"meta":{"title":"Hexo","subtitle":"","description":"","author":"休息","url":"https://yuxinandyang.github.io","root":"/"},"pages":[],"posts":[{"title":"C++模板","slug":"模板","date":"2023-07-31T04:10:55.875Z","updated":"2023-07-31T04:11:58.008Z","comments":true,"path":"2023/07/31/模板/","link":"","permalink":"https://yuxinandyang.github.io/2023/07/31/%E6%A8%A1%E6%9D%BF/","excerpt":"","text":"C++模板类模板类与函数模板类似，也可以通过参数泛化，类模板实参可以是某一型别或常量（常量仅限于int或enum） 12345678910111213141516171819202122232425262728293031//T可以是任意型别//模板实参可以是int或enum//n是编译时定义的常量//n可以由默认值//size_t型别的成员变量可以用n初始化const std::size_t DefaultStackSize = 1024;template &lt;typename T, std::size_t n = DefaultStackSize&gt;class Stack&#123;public: Stack(Stack&lt;T,n&gt;const&amp;); Stack&lt;T&gt;&amp; operator=(Stack&lt;T,n&gt; const&amp;); void Push(const T const&amp; element); int Pop(T&amp; element); int Top(T&amp; element)const;private: std::vector&lt;T&gt; m_Members; std::suze_t m_nMaxSize=n;&#125;;void Stack&lt;T,nMaxSize&gt;::Push(const T const&amp; element)&#123; if(m_Mambers.size() &gt; m_nMaxSize)&#123; return; &#125; m_Members.push(element);&#125;//类模板定义Stack&lt;int&gt; stack;Stack&lt;int,100&gt; stack;stack.Pop(element);//两个&gt;&gt; 中间要由空格Stack&lt;Stack&lt;int&gt; &gt; intStackStack; 类模板特化 允许对一个类模板的某些模板参数型别特化 特化的作用或好处 对于某种特殊的型别，可能可以做些特别的优化或提供不同的实现 避免在实例化类的时候引起一些可能产生的诡异行为 特化一个类模板的时候也意味着需要特化其所有参数化的成员函数 如果特化一个类，做法是 声明一个带template&lt;&gt;的类，即空参数列表 在类名称的后面紧跟尖括号指明型别，例如 template&lt;&gt; class Stack&lt;std::wstring&gt;&#123; ... &#125;; 函数模板模板被编译了两次 没有实例化之前，检查模板代码本身是否有语法错误 实例化期间，检查对代码的调用是否合法 参数推导 模板参数是由传递给模板函数的实参决定的 不允许自动型别转换，每个T必须严格匹配 两种处理转换错误的方法 用static_cast或强制转换参数型别使两者匹配 Max(static_cast(1),2.0) 显示指定型别 Max&lt;double(1,2.0) 总结 对于不同的实参型别，模板函数定义了一族函数 当传递模板实参的时候，函数模板依据实参的型别进行实例化 可以显式指定模板的实参型别 函数模板可以重载 当重载函数模板时，将改变限制在：显式指定模板参数 所有的重载版本的声明必须位于它们被调用的位置之前","categories":[],"tags":[{"name":"C++","slug":"C","permalink":"https://yuxinandyang.github.io/tags/C/"}]},{"title":"HelloWorld","slug":"HelloWorld","date":"2023-07-31T02:17:40.000Z","updated":"2023-07-31T02:22:32.213Z","comments":true,"path":"2023/07/31/HelloWorld/","link":"","permalink":"https://yuxinandyang.github.io/2023/07/31/HelloWorld/","excerpt":"","text":"helloworld.cpp-第一行代码1234#include&lt;iostream&gt;int main()&#123; std::cout&lt;&lt;&quot;hello world!&quot;&lt;&lt;std::endl;&#125;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-07-31T02:14:53.311Z","updated":"2023-07-31T02:14:53.311Z","comments":true,"path":"2023/07/31/hello-world/","link":"","permalink":"https://yuxinandyang.github.io/2023/07/31/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"C++","slug":"C","permalink":"https://yuxinandyang.github.io/tags/C/"}]}